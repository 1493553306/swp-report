\documentclass[9pt]{beamer}

\usepackage[utf8]{inputenc}
\usepackage{mathtools}
\usepackage{hyperref}
\usepackage{color}
\definecolor{light-gray}{gray}{0.90}

 \include{fu-beamer-template}

\title{Bringing RIoT-OS to the RIoTboard}
 % \subtitle{Zweite Zw.-Pres.}

\author{Lennart Dührsen and Leon Martin George}

 \institute[FU Berlin]{Freie Universität Berlin}

 \date{Softwareproject - Telematics, 2014}

 \subject{\fontsize{15cm}{1em}Computer Science}

 \renewcommand{\footlinetext}{\insertshortinstitute, \insertshorttitle, \insertshortdate}
 \newcommand{\tableofsubs}{\tableofcontents[currentsection,sectionstyle=show/show,subsectionstyle=show/shaded/hide]}

\begin{document}

 \begin{frame}[plain]
  \titlepage
% Were porting to the RIoTboard. You probably know us by now...
 \end{frame}

\section{Motivation}

\begin{frame}{Context}
 \begin{itemize}
% also commonly known as: META-stuff-slide
\pause
 \item what do we want?
\pause
 \begin{itemize}
 \item RIoT-OS running on the RIoTboard
% because, why not?
\pause
 \item have fun coding
% who doesn't?
\pause
 \item fancy hardware
% thank you (for the hardware)
\pause
 \item credit points
% why wouldn't we?
 \end{itemize}
\pause
 \item what did we expect to achieve?
\pause
 \begin{itemize}
 \item get the hardware for free
% because that's the only real reason to join a telematics-project
\pause
 \item basic support of the RIoTboard for RIoT-OS
% just because these names go really well together..
\pause
 \item be motivated enough to continue working on the port after the software-project
% seems like it's far more interesting than "deytabeysis" + plus we can keep the board for as long as we are working on it
 \end{itemize}
 \end{itemize}
\end{frame}

\section{Task-Division}

\begin{frame}{Task-Division}
% aka "boring slide"
\pause
 \begin{itemize}
 \item sub-goals:
% we had help planning the steps before the project even started
\pause
 \begin{itemize}
 \item gather relevant documents
% if only we had read them also...
\pause
 \item find out how on the board "works"
% we asked for the hardware early and having the board and a linux-port really helps
\pause
 \item build a basic application that runs on the board (LED-blinking)
% get something to run
\pause
 \item build this application from within RIoT-OS (run our program from the \texttt{board\_init})
% build "something" the RIoT-style
\pause
 \item enable interrupts
% interrupts are enabled 
\pause
 \item implement timer-interface
% 
\pause
 \end{itemize}
 \item milestone arrangement
% these points really don't make sense in any other order
\pause
 \item milestones have dates assigned
% the team urged us not to try to do too much and we were very conservative with the dates
 \end{itemize}
\end{frame}

\section{Outcome}

\begin{frame}{Outcome}
\pause
 \begin{itemize}
  \item 
 \end{itemize}
\end{frame}

\begin{frame}{Problems - documentation}
% or: did everything work as expected?
% short answer - as with every project: no (or nöööö)
% while gathering documents we were expecting something like a straight-forward
% memory-map like we were used to from the micro-processor-lab
\pause
 \begin{itemize}
 \item expectation: to turn on the LED write a bit to \$meow:3
 \item reality: \textcolor{light-gray}{You should be worried there is another break here}
% warning: the ugliness of these slides depicts the ugliness of having to find out these things the hard way
\pause
 	\begin{itemize}
 \item i.MX6-reference-manual
 		\begin{itemize}
 \item the status of a GPIO-pin is determined by a bit in a register that can be anywhere - based on the configuration of the muxer
 \item names of channels in the muxer are from the same namespace as the functions mapped onto them
 		\end{itemize}
 \item RIoTboard-schematics
 		\begin{itemize}
 \item one LED on the RIoTboard is connected to a function "EIM\_DATAwx" \textcolor{light-gray}{which you can then map GPIOyz on}
 		\end{itemize}
 	\end{itemize}
\pause
 \end{itemize}
\end{frame}

\begin{frame}{Problems - reference code}
 \begin{itemize}
 \item blablabla
 	\begin{itemize}
 \item embest-tech doesn't supply a muxer-configuration-file that can be used with the SDK
% which is kinda sad. They have targeted mainly android development and a bit of linux
 \item maybe looking at how they did it for their u-boot- and linux-ports helps?
% is spaghetti. we don't dare think about how our code would look like if be based it on spaghetti.
 	\end{itemize}
\pause
 \item reconsideration: the i.MX6-platform-SDK has macros to abstract to and from the muxer config
% which you can only use if you have valid configuration file which in turn can only be created and generated code from with a windows-only-tool
 \end{itemize}
\end{frame}


\end{document}
